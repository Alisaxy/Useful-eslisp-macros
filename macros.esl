(macro ? (lambda (predicate left right)
 (return `(?:
  ,predicate
  ((lambda () (,@left)))
  ((lambda () (,@right)))))))

; variadic lambda, usage: (vlambda test (x (y 10) z (i 999)) (console.log x y z i rest))
; supports default arguments
; slices the rest arguments into the rest array
; WARNING: this macro has an explicit name parameter, good for debugging
; BREAKING CHANGE: now with an implicit return for the last statement
(macro vlambda (lambda (name params)
  (function default-template (symbol value)
    (var template (object type "list" values
      (array (object type "atom" value "=") symbol
        (object type "list" values
          (array (object type "atom" value "?:")
          (object type "list" values
            (array (object type "atom" value "||")
              (object type "list" values (array (object type "atom" value "===")
                                                symbol
                                                (object type "atom" value "undefined")))
              (object type "list" values (array (object type "atom" value "===")
                                                symbol
                                                (object type "atom" value "null"))))) value symbol)))))
    (return template))
  (var defaults (object type "list" values (array)))
  (var raw (object type "list" values (array)))
  (for (var i 0) (< i params.values.length) (++ i)
    (var value (get params.values i))
    (if (=== value.type "list")
      (block
        (var symbol (get value.values 0))
        (var val (get value.values 1))
        (defaults.values.push (default-template symbol val))
        (raw.values.push symbol))
      (raw.values.push value)))
  (= params-len (object type "atom" value (String raw.values.length)))
  (var rest (Array.prototype.slice.call arguments 2))
  (var last (rest.pop))
  (var body (object type "list" values rest))
  (return `(lambda ,name (,@raw)
    ,@defaults
    (var rest (Array.prototype.slice.call arguments ,params-len))
    ,@body
    (return ,last)))))

; chain methods just like in JS!
; usage: (chain (Lazy (array 1 2 3 4 5 6 7)) (filter (lambda (x) (return (=== (% x 2) 0)))) (map (lambda (x) (return (* x 3)))) (reduce (lambda (x y) (return (+ x y)))))
(macro chain (lambda ()
  (var operator)
  (var operands)
  (function generate (prev next)
    (if (=== next.type "list")
      (block
        (= operands (next.values.slice 0))
        (= operator (operands.shift)))
      (block
        (= operator next)
        (= operands undefined)))
    (var template (object type "list" values (array (object type "atom" value ".") prev operator)))
    (var result)
    (if (=== operands undefined)
      (= result template)
      (block
        (var envelope (object type "list" values (array template)))
        (= envelope.values (envelope.values.concat operands))
        (= result envelope)))
    (return result))
  (var args (Array.prototype.slice.call arguments 0))
  (var result (args.shift))
  (for (var i 0) (< i args.length) (++ i)
    (= result (generate result (get args i))))
  (return result)))

(macro make-lookup (lambda ()
  (var args (Array.prototype.slice.call arguments 0))
  (var result (object type "list" values (array)))
  (for (var i 0) (< i args.length) (++ i)
    (result.values.push (get args i))
    (result.values.push (object type "atom" value "true")))
  (return `(object ,@result))))
